<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="oracleMapper">
 <sql id="filter">
  <if test="category == '1'">
		AND CATEGORY = 1
	</if>
	<if test="category == '2'">
		AND CATEGORY = 2
	</if>
	<if test="karaoke == 1">
		AND KARAOKE = 1
	</if>
	<if test="convenienceStore == 1">
		AND CONVENIENCESTORE = 1
	</if>
	<if test="parkingLot == 1">
		AND PARKINGLOT = 1
	</if>
	<if test="seminarRoom == 1">
		AND SEMINARROOM = 1
	</if>
	<if test="bbq == 1">
		AND BBQ = 1
	</if>
	<if test="restaurant == 1">
		AND RESTAURANT = 1
	</if>
	<if test="wifi == 1">
		AND WIFI = 1
	</if>
	<if test="tv == 1">
		AND TV = 1
	</if>
	<if test="airConditioner == 1">
		AND AIRCONDITIONER = 1
	</if>
	<if test="miniBar == 1">
		AND MINIBAR = 1
	</if>
	<if test="bathTub == 1">
		AND BATHTUB = 1
	</if>
	<if test="refrigerator == 1">
		AND REFRIGERATOR = 1
	</if>
	<if test="pickup == 1">
		AND PICKUP = 1
	</if>
	<if test="cooking == 1">
		AND COOKING = 1
	</if>
	<if test="breakfast == 1">
		AND BREAKFAST = 1
	</if>
	<if test="freeParking == 1">
		AND FREEPARKING = 1
	</if>
	<if test="jeju == 1">
		AND ADDRESS like '%제주시%'
	</if>
	<if test="aewol == 1">
		AND ADDRESS like '%애월%'
	</if>
	<if test="hamdeok == 1">
		AND ADDRESS like '%함덕%'
	</if>
	<if test="moonset == 1">
		AND ADDRESS like '%월정%'
	</if>
	<if test="gujwa == 1">
		AND ADDRESS like '%구좌%'
	</if>
	<if test="seogwipo == 1">
		AND ADDRESS like '%서귀포%'
	</if>
	<if test="seongsan == 1">
		AND ADDRESS like '%성산%'
	</if>
	<if test="pyoseon == 1">
		AND ADDRESS like '%표선%'
	</if>
 </sql>

  <select id="getListHotelwithFilter">
    SELECT
    * FROM V_HOTEL
    WHERE HOTELID IS NOT NULL
  <include refid="filter"></include>
  </select>
  
  <select id="getListCharger">
    SELECT
    * FROM TBL_CHARGERLOC
	WHERE CHAGERID IS NOT NULL
	<include refid="filter"></include>
  </select>

  <select id="getListTopTen">
    SELECT * FROM (
      select * from TBL_HOTEL NATURAL JOIN TBL_HOTEL_ATTACH where starrate is not null ORDER BY STARRATE DESC
      ) WHERE ROWNUM<![CDATA[ <= ]]>10
  </select>

  <select id="getListStore">
    SELECT
    * FROM V_STORE
	WHERE STOREID IS NOT NULL
	<include refid="filter"></include>
  </select>

  <!-- 맛집 정보 storeid 별로 구분 -->
  <select id="getStore">
    SELECT
    * FROM V_STORE
	WHERE STOREID = #{storeid}
  </select>

  <!-- 맛집 리뷰 크로링 정보 띄우기 -->
  <select id="getListReply">
    SELECT
    * FROM TBL_REPLY full join tbl_reply_attach Using(rno) WHERE STOREID= #{storeid} ORDER BY REGDATE DESC
  </select>
<!-- 제품 정보 가져오기 조인 -->
  <select id="getListProduct">
    SELECT 
		* FROM TBL_product full join tbl_product_attach Using(productid) WHERE productid = productid ORDER BY productid DESC
  </select>

  <!-- 맛집 새리뷰 DB 넣고 띄우기 -->
  <insert id="insertReply">
	INSERT INTO TBL_REPLY(RNO,NICKNAME,REGDATE,STOREID,CONTENT,STARRATE,RRNO) 
	VALUES(SEQ_REPLY.NEXTVAL,#{nickname},SYSDATE,#{storeid},#{content},#{starrate},#{rrno})
  </insert>

  <insert id="insertReplyAttach">
	INSERT INTO TBL_REPLY_ATTACH(UUID,PATH,IMAGE,RNO) 
	VALUES(#{uuid},#{path},1,(SELECT (LAST_NUMBER)-1 FROM USER_SEQUENCES WHERE SEQUENCE_NAME='SEQ_REPLY'))
  </insert>

  <update id="updateReply">
 		UPDATE TBL_REPLY SET 
 			REGDATE = SYSDATE,
 			STARRATE = #{starRate},
 			CONTENT = #{content}
 		WHERE RNO = #{rno}
  </update>
  <update id="updateReplyAttach">
 		UPDATE TBL_REPLY_ATTACH SET 
 			UUID = #{uuid},
 			REGDATE = SYSDATE,
 			PATH = #{path}
 		WHERE RNO = #{rno}
  </update>

  <delete id="deleteReply" >
	DELETE FROM TBL_REPLY WHERE RNO = #{rno}
  </delete>
  <delete id="deleteReplyAttach" >
	DELETE FROM TBL_REPLY_ATTACH WHERE RNO = #{rno}
  </delete>

	<!-- <insert id="insertKakao">
	INSERT INTO TBL_SOCIAL_MEMBER(EMAIL,AGERANGE,BIRTHDAY,GENDER,NICKNAME,METHOD) 
	VALUES(#{EMAIL},#{AGERANGE},#{BIRTHDAY},#{GENDER},#{NICKNAME},#{METHOD})
  </insert> -->
	<insert id="insertKakao">
	INSERT INTO TBL_MEMBER(USERID,PW,EMAIL,PHONE,REGDATE,UPDATEDATE,ENABLED,ROADADDR,ADDRDETAIL,ZIPNO,JIBUNADDR,NAME,BIRTHDATE,NICKNAME,PHONE2,PHONE3,AUTHEMAIL,DELSTATUS,AUTHTOKEN,GENDER,METHOD) 
	VALUES(#{USERID},'','','',SYSDATE,'','1','','','','','',#{BIRTHDATE},#{NICKNAME},'','','0','0','','',#{METHOD})
  </insert>
	<insert id="insertMember">
	INSERT INTO TBL_MEMBER(USERID,PW,EMAIL,PHONE,REGDATE,UPDATEDATE,ENABLED,ROADADDR,ADDRDETAIL,ZIPNO,JIBUNADDR,NAME,BIRTHDATE,NICKNAME,PHONE2,PHONE3,AUTHEMAIL,DELSTATUS,AUTHTOKEN,GENDER,METHOD) 
	VALUES(#{USERID},#{PW},#{EMAIL},#{PHONE},SYSDATE,SYSDATE,'1','','','','',#{NAME},#{BIRTHDATE},#{NICKNAME},#{PHONE2},#{PHONE3},'0','0','',#{GENDER},'')
  </insert>

  <update id="updateUser">
 		UPDATE TBL_MEMBER SET 
 			PW = #{user_pwd},
 			EMAIL = #{user_email},
 			PHONE = #{user_tel1},
			PHONE2 = #{user_tel2},
			PHONE3 = #{user_tel3},
			UPDATEDATE = SYSDATE,
			NICKNAME = #{user_nickname}
 		WHERE USERID = #{user_id}
  </update>

  <delete id="deleteUser" >
	DELETE FROM TBL_MEMBER WHERE USERID = #{user_id}
  </delete>

  <!-- 아이디별(nickname) 리뷰 마이페이지에 구분(저장) -->
  <!-- 리뷰 사진 크롤링 완료 후 -> 테이블 V_REPLY 로 변경해야됨 -->
  <select id="getReplyMypage">
    SELECT
    * FROM TBL_REPLY full join tbl_reply_attach Using(rno) WHERE NICKNAME=#{nickname} ORDER BY REGDATE DESC
  </select>
	<insert id="insertProduct">
	INSERT INTO TBL_PRODUCT(PRODUCTID,PRODUCTNAME,PRICE,DESCRIPTION) 
	VALUES(SEQ_PRODUCT.NEXTVAL,#{productname},#{price},#{description})
  </insert>
	 <insert id="insertProductAttach">
	INSERT INTO TBL_PRODUCT_ATTACH(UUID,PATH,IMAGE,PRODUCTID) 
	VALUES(#{uuid},#{path},1,(SELECT (LAST_NUMBER)-1 FROM USER_SEQUENCES WHERE SEQUENCE_NAME='SEQ_PRODUCT'))
  </insert>
	<insert id="insertOrder">
	INSERT ALL
	INTO TBL_ORDER(ORDERID,ORDERNAME,CREATEDATE,PAID,EMAIL,ADDRESS,USERID,PHONE) 
	VALUES(SEQ_ORDER.NEXTVAL,#{ORDERNAME},SYSDATE,#{PAID},#{EMAIL},#{ADDRESS},#{USERID},#{PHONE})
	INTO TBL_PAYMENT(PAYMENTNUM,PAYMENTPRICE,PAYMENTDATE,PAYMENTSTATUS,USERID)
	VALUES(#{PAYMENTNUM},#{PAYMENTPRICE},SYSDATE,#{PAID},#{USERID})
	select * from DUAL
	</insert>
	<insert id="insertOrderItem">
	INSERT INTO TBL_ORDER_ITEM(ORDERITEMID,QUANTITY,CREATEDATE,PRICE,PRODUCTID,ORDERID) 
	VALUES(SEQ_ORDER_ITEM.NEXTVAL,#{QUANTITY},SYSDATE,#{PRICE},#{PRODUCTID},(SELECT (LAST_NUMBER)-1 FROM USER_SEQUENCES WHERE SEQUENCE_NAME='SEQ_ORDER'))
  </insert>
  	<select id="getCustomList">
		SELECT *
		FROM(
			SELECT STOREID,HOTELID,NAME,STARRATE,STORENAME,ADDRESS,LONGITUDE,LATITUDE,UUID,PATH,COMMENTS,PRICE,INFO,TEL,(6371 * acos( cos( radians(#{LATITUDE}) ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(#{LONGITUDE}) ) + sin( radians(#{LATITUDE}) ) * sin( radians(latitude) ) ) ) AS distance 
		FROM V_CUSTOM) where distance<![CDATA[ <= ]]>2 order by storeid
	</select>
</mapper>